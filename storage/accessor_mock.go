// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/umputun/metrics/metric"
	"sync"
	"time"
)

// Ensure, that AccessorMock does implement Accessor.
// If this is not the case, regenerate this file with moq.
var _ Accessor = &AccessorMock{}

// AccessorMock is a mock implementation of Accessor.
//
// 	func TestSomethingThatUsesAccessor(t *testing.T) {
//
// 		// make and configure a mocked Accessor
// 		mockedAccessor := &AccessorMock{
// 			DeleteFunc: func(ctx context.Context, m metric.Entry) error {
// 				panic("mock out the Delete method")
// 			},
// 			FindAllFunc: func(ctx context.Context, from time.Time, to time.Time, interval time.Duration) ([]metric.Entry, error) {
// 				panic("mock out the FindAll method")
// 			},
// 			WriteFunc: func(ctx context.Context, m metric.Entry) error {
// 				panic("mock out the Write method")
// 			},
// 		}
//
// 		// use mockedAccessor in code that requires Accessor
// 		// and then make assertions.
//
// 	}
type AccessorMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, m metric.Entry) error

	// FindAllFunc mocks the FindAll method.
	FindAllFunc func(ctx context.Context, from time.Time, to time.Time, interval time.Duration) ([]metric.Entry, error)

	// WriteFunc mocks the Write method.
	WriteFunc func(ctx context.Context, m metric.Entry) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M metric.Entry
		}
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// From is the from argument value.
			From time.Time
			// To is the to argument value.
			To time.Time
			// Interval is the interval argument value.
			Interval time.Duration
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M metric.Entry
		}
	}
	lockDelete  sync.RWMutex
	lockFindAll sync.RWMutex
	lockWrite   sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *AccessorMock) Delete(ctx context.Context, m metric.Entry) error {
	if mock.DeleteFunc == nil {
		panic("AccessorMock.DeleteFunc: method is nil but Accessor.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   metric.Entry
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, m)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedAccessor.DeleteCalls())
func (mock *AccessorMock) DeleteCalls() []struct {
	Ctx context.Context
	M   metric.Entry
} {
	var calls []struct {
		Ctx context.Context
		M   metric.Entry
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindAll calls FindAllFunc.
func (mock *AccessorMock) FindAll(ctx context.Context, from time.Time, to time.Time, interval time.Duration) ([]metric.Entry, error) {
	if mock.FindAllFunc == nil {
		panic("AccessorMock.FindAllFunc: method is nil but Accessor.FindAll was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		From     time.Time
		To       time.Time
		Interval time.Duration
	}{
		Ctx:      ctx,
		From:     from,
		To:       to,
		Interval: interval,
	}
	mock.lockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	mock.lockFindAll.Unlock()
	return mock.FindAllFunc(ctx, from, to, interval)
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//     len(mockedAccessor.FindAllCalls())
func (mock *AccessorMock) FindAllCalls() []struct {
	Ctx      context.Context
	From     time.Time
	To       time.Time
	Interval time.Duration
} {
	var calls []struct {
		Ctx      context.Context
		From     time.Time
		To       time.Time
		Interval time.Duration
	}
	mock.lockFindAll.RLock()
	calls = mock.calls.FindAll
	mock.lockFindAll.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *AccessorMock) Write(ctx context.Context, m metric.Entry) error {
	if mock.WriteFunc == nil {
		panic("AccessorMock.WriteFunc: method is nil but Accessor.Write was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   metric.Entry
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(ctx, m)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedAccessor.WriteCalls())
func (mock *AccessorMock) WriteCalls() []struct {
	Ctx context.Context
	M   metric.Entry
} {
	var calls []struct {
		Ctx context.Context
		M   metric.Entry
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
